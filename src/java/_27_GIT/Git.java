package _27_GIT;

public class Git { // Это такой инструмент, при помощи которого мы отправляем в удаленный репозиторий .
                      //Мост между локальной машиной и удаленным репазиторий
    // Github - это удаленный репазиторий(хранилище)
    // Git и Github это разные вещи

// 1.Local repository - наш компютер
// 2.Remote repository - web


// Git reflog По умолчанию команда выводит журнал ссылок для указателя HEAD .

//Команда для удаления ненужных файлов с рабочей директории, которые еще не отслеживаются гитом
//1. git clean -n показывает список файлов, которые будут удалены (но не производит само удаление).
//2. git clean -а удаляет все неотслеживаемые файлы.
//3. git clean -f -d удаляет и файлы, и директории, которые не отслеживаются гитом.
//              COMMANDS GIT
// 1) git init: Локально инициализирует(создает) новый репозиторий Git. (все классы загараются красным, красные - неотслеживаемые гитом)
// 2) git status: показывает состояние репозитория, включая файлы, неотслеживаемые гитом
// 3) git add ./* : подготавливает все классы проекта в наш локальный репазиторий (все классы стали зелеными,зеленые - отслеживаемые гитом)
// 4) git commit -m MyFirstCommit : отправляет подготовленные классы в локальный репозиторий(MyFirstCommit - название/описание того,что ты изменил)
// 5) git branch name : создает или удаляет ветки
//    git branch: Перечисляет ветки
// 6) git switch name: Переключится на ветку name
// 7) git merge: объединить изменения из одной ветки в другую
// 8) git remote add origin https://github.com/Almaz808/gitPractice.git :соединяет удаленный репазиторий с нашим локальным репазиторий
// 9) git push -u origin main
//    Username : Almaz808
//    Password : token (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)

// 5) git push: отправляет изменения в удаленный репозиторий.

// git clone: создает копию удаленного репозитория на вашем локальном компьютере.
// git add: Добавляет изменения в индекс для фиксации
// git commit: Создает новую фиксацию с изменениями, добавленными в индекс.
// git log: показывает журнал всех коммитов в репозитории.
// git diff: показывает различия между рабочим деревом и индексом или конкретной фиксацией.
// git checkout: Переключиться на другую ветку или восстановить файлы рабочего дерева.
// git pull: извлекает изменения из удаленного репозитория и объединяет их с текущей веткой.
// git fetch: извлекает изменения из удаленного репозитория, но не объединяет их
// git remote: список, добавление или удаление удаленных репозиториев.
// git stash: Скрывает изменения в рабочем дереве.
// git tag: список, создание или удаление тегов
// git blame: показывает фиксацию и автора для каждой строки в файле.
// git gc: очищает ненужные файлы и сжимает репозиторий
// git fsck: Проверяет целостность репозитория
// git filter-branch: Переписывает историю ветки
// git bisect: Находит конкретную фиксацию с помощью бинарного поиска.
// git cherry-pick: применяет изменения из определенного коммита к текущей ветке.
// git rebase: перебазирует текущую ветку в другую ветку или фиксирует


}


//Эпик — это большой объем работы, который можно разбить на несколько историй поменьше (в Jira они называются «задачами»).
//Изначально система Jira создавалась как решение для отслеживания задач и ошибок. Но сегодня Jira — это мощный инструмент управления работой, подходящий для самых разных случаев, от управления требованиями и сценариями тестирования до agile-разработки программного обеспечения.
